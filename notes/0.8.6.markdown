### New features

* Add the `validate` method to companions of refined types to accumulate
  errors with `cats.data.ValidatedNel`. To use this method, `syntax._`
  from the `refined-cats` module needs to be imported like this:
  ```scala
  scala> import eu.timepit.refined.types.numeric.PosInt
  scala> import eu.timepit.refined.cats.syntax._

  scala> PosInt.validate(1)
  res0: cats.data.ValidatedNel[String,PosInt] = Valid(1)
  ```
  Thanks to [Howy Perrin](https://github.com/howyp)!
  ([#382][#382], [#384][#384])
* Add the `validate` method using `scalaz.ValidationNel` also to the
  `refined-scalaz` module.
  Thanks to [kusamakura](https://github.com/kusamakura)! ([#385][#385])

### New predicates

[`string`](https://github.com/fthomas/refined/blob/v0.8.6/modules/core/shared/src/main/scala/eu/timepit/refined/string.scala)

* `ValidInt`: checks if a `String` is a parsable `Int`
* `ValidLong`: checks if a `String` is a parsable `Long`
* `ValidDouble`: checks if a `String` is a parsable `Double`
* `ValidBigInt`: checks if a `String` is a parsable `BigInt`
* `ValidBigDecimal`: checks if a `String` is a parsable `BigDecimal`

Thanks to [kusamakura](https://github.com/kusamakura)! ([#379][#379])

### Performance improvements

* Apply the optimization done in [#334][#334] also to macro calls that
  use `RefineMacro.implApplyRef`. Before this change, compilation time
  of e.g. `PosInt(1)` was one order of magnitude slower than `1: PosInt`.
  With this change there is no difference in compilation times between
 Â these two calls. ([#388][#388])

[#334]: https://github.com/fthomas/refined/pull/334
[#379]: https://github.com/fthomas/refined/pull/379
[#382]: https://github.com/fthomas/refined/pull/382
[#384]: https://github.com/fthomas/refined/pull/384
[#385]: https://github.com/fthomas/refined/pull/385
[#388]: https://github.com/fthomas/refined/pull/388
